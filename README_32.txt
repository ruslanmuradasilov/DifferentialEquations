Документация.

32. Метод сведение уравнения к системе второго порядка, нахождения решения этой системы ДУ метод Адамса-Мултона
и используя метод пристрелки (с методом деления пополам) для решения уравнения

1. Описание работы программы.

    Программа решает задачу поиска функции y(x) при заданном дифференциальном уравнении второго порядка вида:
    y'' + p(x)y' + q(x)y = f(x)
    с условиями y(a) = c, y(b) = d на [a, b].

    Производится замена z = y' и уравнение второго порядка сводится к системе:
    {
        y' = z
        z' = -p(x)z - q(x)y + f(x)
    }

    с начальными значениями на левой границе y(a) = c, z(a) = t, где t - параметр.

    Методом пристрелки подбирается значение параметра t для уравнения F(t) - d = 0, где
    F(t) - значение приближения в точке b, найденное методом Адамса Мультона.

    Решение системы дифференциальных уравнений с начальными значениями y(a) = c, z(a) = t производится
    методом Адамса Мультона, которое состоит из трёх этапов.
    На первом этапе используется метод Рунге Кутта 4 порядка для нахождения первых четырех значений
    искомых функций системы.
    На втором этапе (предиктор) используется метод Адамса Башфорта 4 порядка для приблжения значения на следующей точке.
    На третьем этапе (корректор) используется метод Адамса Мультона 4 порядка для более точного приближения (коррекции)
    значений функций в следующей точке. Полученные значения на этом этапе сохраняются и происходит переход ко второму
    этапе с обновленными значениями. Второй и третий этап повторяются до тех пор, пока не будут найдены значения
    функций в точке b с шагом h.

2. Инструкция по использованию.
	Для работы программы необходима программа gnuplot, которая предоставлена в сборке.
		При установке ОБЯЗАТЕЛЬНО нужно нажать на галку добавления в перменные среды операционной системы.

	По-умолчанию программа, при запуске ехе файла, считывает входные данные из файла input_01_36.txt и записывает в файл output_01_36.txt.
	Произвольные файлы для входных и выходных данных задаются параметрами в консоли и имеют вид:
		./interpolation [input_file] [output_file]

	Входные данные:

		a b c d h eps

	где a, b соответственно левая и правая границы, c, d - соответственно значения искомой функции в точках a и b
	h - шаг метода, eps - точность для метода пристрелки

	В файле init_functions.c необходимо ввести функции p(x), q(x), r(x).
	Также в данном файле имеется опциональная функция groundTruth(x), резульатом работы программы является
	вывод графика функции groundTruth(x) и приближения решения уравнения с шагом h на отрезке [a, b].
	Предполагается, что пользователь введёт в groundTruth искомую функцию для оценки качества приближения.

	Выходные данные:

	В выходном файле будет выведено (b - a) / h + 1 строк вида:
	<Точка> <Значение приближения на точке>
	Запустится программа gnuplot с графиком функции groundTruth и приближением.


3. Коды возвращаемых ошибок:

	0 - Программа успешно отработала
	-1 - Интервал не найден, уравнение не имеет решения

4. Описание исходного кода.

	Функции реализованные в файле main_01_36.c:
		1. size_t memoryForResult(double a, double b, double h)
			Аргументы: число, число, число
			Описание: Вычисляет количество шагов и выдает необходимый размер памяти для результирующего массива

		1. size_t memoryForYZLast()
        		Аргументы: нет
            		Описание: Выдает необходимый размер памяти для массива временной памяти

		3. int main
			Описание: реализует интерфейс взаимодействия с подпрограммой для рисования и подпрограммой для решения задачи


	Функции реализованные в файле odu_01_36.c:
		1. void Adams_Moulton(double a, double b, double c, double t, double h, int n, double *yzlast, double *result);
			Аргументы: число, число, число, число, число, число, указатель на массив временной памяти и указатель на массив для результата
			Описание: Принимает на вход данные необходимые для решения системы дифференциальных уравнений первого порядка и записывает
			результат в массив result
			Вывод: нет

		2. double G(double a, double b, double c, double t, double h, double *yzlast, double *result, double d);
			Aргументы: число, число, число, число, число, указатель на массив временной памяти, указатель на массив для результата и число
        		Описание: Принимает на вход данные необходимые для решения системы дифференциальных уравнений первого порядка и записывает
        		результат в массив result
        		Вывод: разница между y(t) и d

		3. int solver(double a, double b, double c, double d, double h, double eps, double *yzlast, double *result)
            		Aргументы: число, число, число, число, число, число, указатель на массив временной памяти и указатель на массив для результата
            		Описание: Принимает на вход a, b, c, d, h, eps и указатели на массивы дополнительной памяти и результирующий.
            		Функция реализует метод пристрелки для нахождения значения параметра t (подробнее читайте описание работы программы)
            		Вывод: Число - 0, если интервал найден и подобран параметр t, и -1, если интервал не найден,
            		в массиве result находится приближение искомой функции с оптимальным параметром.

        	4. int find_interval(double a, double b, double c, double d, double h, double *yz_last, double *result, double *left, double *right)
            		Aргументы: число, число, число, число, число, указатель на массив временной памяти, указатель на массив для результата, число, число
            		Описание: Принимает на вход a, b, c, d, h, eps, указатели на массивы дополнительной памяти и результирующий, границы интервала
            		Функция реализует метод пристрелки для нахождения значения параметра t (подробнее читайте описание работы программы)
            		Вывод:
                 		0 - интервал найден, G - убывающая
                 		1 - интервал найден, G - возрастающая
                 		-1 - интервал не найден

        	5. void shoot(double a, double b, double c, double d, double h, double eps, double *yz_last, double *result, double left, double right, int G_ascends)
            		Aргументы: число, число, число, число, число, число, указатель на массив временной памяти, указатель на массив для результата, число, число, число
            		Описание: Принимает на вход a, b, c, d, h, eps, указатели на массивы дополнительной памяти и результирующий, границы интервала и G_type
            		Функция реализует метод пристрелки для нахождения значения параметра t (подробнее читайте описание работы программы)
            		Вывод: нет


	Функции реализованные в файле plot_01_36.c:
		1. void draw(double a, double b, double h, double* result)
			Аргументы: число, число, число, указатель на массив со значениями приближения
			Описание: Принимает на вход точки, отрезок [a, b], шаг h, значения приближения и рисует графики функции
			groundTruth и приближения решения искомой функции на заданном отрезке
			Вывод: запускает программу gnuplot и исует графики функции
            groundTruth и приближения решения искомой функции на заданном отрезке
